package Day2;


import Utils.InputUtils;

import java.io.File;
import java.util.*;
import java.util.stream.Collectors;

public class Day2 {
    private int part1(List<String> inputs,int red, int green, int blue){
        Map<String,Integer> rule = Map.of("red",red, "green", green, "blue" , blue);
        int sum = 0;
        for(String input: inputs){
            int id = Integer.parseInt(input.split(":")[0].split(" ")[1]);
            String[] cubeSets = input.split(":")[1].split(";");
            int count = 0;
            boolean possible =false;
            outerLoop:
            for(String set: cubeSets){
                Map<String,Integer> map = new HashMap<>(); //color: counts
                for(String s:set.split(",")){
                    String color = s.strip().split(" ")[1];
                    int number = Integer.parseInt(s.strip().split(" ")[0]);
                    map.put(color, map.getOrDefault(color,0)+number);
                    if(map.getOrDefault(color,0)>rule.get(color)){
                        possible = false;
                        break outerLoop;
                    }else{
                        possible = true;
                    }
                }
                if(possible){
                    count++;
                }
            }
            if (count == cubeSets.length){
                sum+=id;
            }
        }
        return sum;
    }


    private int part2(List<String> inputs){
        int power = 0;
        for(String input: inputs){
            Map<String,Integer> map = new HashMap<>(Map.of("red",0, "green", 0, "blue" , 0));
            String[] sets = input.split(":")[1].split("[;,]");
            for(String set : sets){
                String[] s = set.strip().split(" ");
                String color = s[1];
                int number = Integer.parseInt(s[0]);
                if(map.get(color)<number){
                    map.put(color,number);
                }
            }
            power += map.values().stream().reduce(1, (a, b) -> a * b);

        }
        return power;
    }

    //----------------------------using stream, generated by chatgpt3.5 tho -.- ----------------------------------------
    //----------------------------------time to learn stream =.= --------------------------------------------------
    private int part1_v2(List<String> inputs, int red, int green, int blue) {
        Map<String, Integer> rule = Map.of("red", red, "green", green, "blue", blue);

        return inputs.stream()
                .filter(input -> Arrays.stream(input.split(":")[1].split(";"))
                        .allMatch(set -> Arrays.stream(set.split(","))
                                .allMatch(s -> isValidColorCount(s, rule))))
                .mapToInt(input -> Integer.parseInt(input.split(":")[0].split(" ")[1]))
                .sum();
    }

    private boolean isValidColorCount(String s, Map<String, Integer> rule) {
        String color = s.strip().split(" ")[1];
        int number = Integer.parseInt(s.strip().split(" ")[0]);
        return rule.getOrDefault(color, 0) >= number;
    }

    private int part2_v2(List<String> inputs) {
        return inputs.stream()
                .map(input -> Arrays.stream(input.split(":")[1].split("[;,]"))
                        .map(s -> s.strip().split(" "))
                        .collect(Collectors.toMap(
                                s -> s[1],
                                s -> Integer.parseInt(s[0]),
                                Integer::max
                        ))
                )
                .mapToInt(colorMap -> colorMap.values().stream()
                        .reduce(1, (a, b) -> a * b)
                )
                .sum();
    }




    public static void main(String[] args) {
       Day2 day2 = new Day2();
       List<String> inputs = InputUtils.inputFileToStringList(new File("src/Day2/input.txt"));
       System.out.println(day2.part1(inputs,12,13,14));
       System.out.println(day2.part2(inputs));
    }

}
